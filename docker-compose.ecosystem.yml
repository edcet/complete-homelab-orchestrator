version: '3.8'

services:
  # Enhanced Pangolin Gateway with OpenMetrics
  pangolin:
    image: fosrl/pangolin:latest
    container_name: pangolin-gateway
    restart: unless-stopped
    ports:
      - "3001:3001"  # Main API
      - "3002:3002"  # OpenMetrics
    environment:
      - PANGOLIN_CONFIG=/app/config/config.toml
      - PANGOLIN_JWT_SECRET=${PANGOLIN_JWT_SECRET:-dev-secret}
      - PANGOLIN_METRICS_FORMAT=openmetrics
      - RUST_LOG=info
    volumes:
      - ./config/pangolin:/app/config:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - homelab
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=3002"
      - "prometheus.path=/metrics"
      - "prometheus.format=openmetrics"
      - "homelab.service=pangolin"
      - "pangolin.component=core"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Newt Tunnel Client with Docker Socket Health Checks
  newt:
    image: fosrl/newt:latest
    container_name: newt-tunnels
    restart: unless-stopped
    ports:
      - "2112:2112"  # Main service
      - "2113:2113"  # Control/health
    environment:
      - NEWT_CONFIG=/app/config/config.yaml
      - DOCKER_SOCKET_CHECK=enabled
    volumes:
      - ./config/newt:/app/config:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - homelab
    labels:
      - "homelab.service=newt"
      - "pangolin.component=tunneling"
    healthcheck:
      test: [
        "CMD", "sh", "-c",
        "curl -f http://localhost:2113/health && test -w /var/run/docker.sock"
      ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s

  # Gerbil Nginx Proxy with mTLS to Pangolin
  gerbil:
    image: nginx:alpine
    container_name: gerbil-proxy
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - ./config/gerbil/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro
    networks:
      - homelab
    labels:
      - "homelab.service=gerbil"
      - "pangolin.component=proxy"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s
    depends_on:
      - pangolin

  # Badger Storage with JWT Auth Middleware
  badger:
    image: dgraph/badger:latest
    container_name: badger-auth
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      - BADGER_CONFIG=/app/config/config.yaml
      - BADGER_JWT_SECRET=${BADGER_JWT_SECRET:-dev-secret}
      - BADGER_AUTH_ENABLED=true
    volumes:
      - ./config/badger:/app/config:ro
      - badger-data:/data
    networks:
      - homelab
    labels:
      - "homelab.service=badger"
      - "pangolin.component=storage"
    healthcheck:
      test: [
        "CMD", "curl", "-H", "Authorization: Bearer test",
        "-f", "http://localhost:8080/health"
      ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Olm WireGuard Lifecycle Manager
  olm:
    image: alpine:latest
    container_name: olm-wireguard
    restart: unless-stopped
    ports:
      - "9090:9090"
      - "51820:51820/udp"  # WireGuard
    environment:
      - OLM_CONFIG=/app/config/config.toml
      - WG_INTERFACE=wg-homelab
      - WG_PORT=51820
    volumes:
      - ./config/olm:/app/config:ro
      - /lib/modules:/lib/modules:ro
    networks:
      - homelab
    labels:
      - "homelab.service=olm"
      - "pangolin.component=networking"
    privileged: true
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    command: |
      sh -c '
        apk add --no-cache wireguard-tools curl &&
        wg genkey | tee /etc/wireguard/private.key | wg pubkey > /etc/wireguard/public.key &&
        while true; do
          if ! ip link show wg-homelab >/dev/null 2>&1; then
            ip link add wg-homelab type wireguard
            wg set wg-homelab private-key /etc/wireguard/private.key
            ip addr add 10.100.0.1/24 dev wg-homelab
            ip link set wg-homelab up
            echo "WireGuard interface wg-homelab created and configured"
          fi
          sleep 30
        done
      '
    healthcheck:
      test: [
        "CMD", "sh", "-c",
        "ip link show wg-homelab && curl -f http://localhost:9090/health"
      ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s

networks:
  homelab:
    external: true

volumes:
  badger-data:
    driver: local