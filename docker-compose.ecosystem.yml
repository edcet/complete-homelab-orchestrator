version: '3.9'
name: homelab-ecosystem
x-compose-observability: true
services:
  pangolin:
    image: fosrl/pangolin:1.0.0
    container_name: pangolin-gateway
    restart: unless-stopped
    ports:
      - "3001:3001"
      - "3002:3002"
    environment:
      - PANGOLIN_CONFIG=/app/config/config.toml
      - PANGOLIN_JWT_SECRET=${PANGOLIN_JWT_SECRET:-change-me}
      - PANGOLIN_METRICS_FORMAT=openmetrics
      - RUST_LOG=info
    volumes:
      - ./config/pangolin:/app/config:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks: [homelab]
    labels:
      - "prometheus.scrape=true"
      - "prometheus.port=3002"
      - "prometheus.path=/metrics"
      - "prometheus.format=openmetrics"
      - "homelab.service=pangolin"
      - "pangolin.component=core"
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:3001/health || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 20s

  newt:
    image: fosrl/newt:1.0.0
    container_name: newt-tunnels
    restart: unless-stopped
    ports:
      - "2112:2112"
      - "2113:2113"
    environment:
      - NEWT_CONFIG=/app/config/config.yaml
      - DOCKER_SOCKET_CHECK=enabled
    volumes:
      - ./config/newt:/app/config:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks: [homelab]
    labels:
      - "homelab.service=newt"
      - "pangolin.component=tunneling"
    depends_on:
      pangolin:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:2113/health && test -w /var/run/docker.sock"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 25s

  gerbil:
    image: nginx:1.27-alpine
    container_name: gerbil-proxy
    restart: unless-stopped
    ports:
      - "8080:8080"
    volumes:
      - ./config/gerbil/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/ssl:ro
    networks: [homelab]
    labels:
      - "homelab.service=gerbil"
      - "pangolin.component=proxy"
    depends_on:
      pangolin:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -sf http://localhost:8080/health || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 20s

  badger:
    image: dgraph/badger:latest
    container_name: badger-auth
    restart: unless-stopped
    ports:
      - "8081:8080"
    environment:
      - BADGER_CONFIG=/app/config/config.yaml
      - BADGER_JWT_SECRET=${BADGER_JWT_SECRET:-change-me}
      - BADGER_AUTH_ENABLED=true
    volumes:
      - ./config/badger:/app/config:ro
      - badger-data:/data
    networks: [homelab]
    labels:
      - "homelab.service=badger"
      - "pangolin.component=storage"
    healthcheck:
      test: ["CMD-SHELL", "curl -sf -H 'Authorization: Bearer test' http://localhost:8080/health || exit 1"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 20s

  olm:
    image: alpine:3.20
    container_name: olm-wireguard
    restart: unless-stopped
    ports:
      - "9090:9090"
      - "51820:51820/udp"
    environment:
      - OLM_CONFIG=/app/config/config.toml
      - WG_INTERFACE=wg-homelab
      - WG_PORT=51820
    volumes:
      - ./config/olm:/app/config:ro
      - /lib/modules:/lib/modules:ro
    networks: [homelab]
    labels:
      - "homelab.service=olm"
      - "pangolin.component=networking"
    privileged: true
    cap_add: [NET_ADMIN, SYS_MODULE]
    command: |
      sh -euc '
        apk add --no-cache wireguard-tools curl iproute2 &&
        [ -f /etc/wireguard/private.key ] || ( umask 077 && wg genkey | tee /etc/wireguard/private.key | wg pubkey > /etc/wireguard/public.key );
        while true; do
          if ! ip link show ${WG_INTERFACE} >/dev/null 2>&1; then
            ip link add ${WG_INTERFACE} type wireguard
            wg set ${WG_INTERFACE} private-key /etc/wireguard/private.key
            ip addr add 10.100.0.1/24 dev ${WG_INTERFACE}
            ip link set ${WG_INTERFACE} up
            echo "WireGuard interface ${WG_INTERFACE} created and configured"
          fi
          sleep 30
        done'
    healthcheck:
      test: ["CMD-SHELL", "ip link show ${WG_INTERFACE} >/dev/null 2>&1 && curl -sf http://localhost:9090/health"]
      interval: 20s
      timeout: 5s
      retries: 5
      start_period: 25s

networks:
  homelab:
    external: true

volumes:
  badger-data:
    driver: local
